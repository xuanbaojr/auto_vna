using System;
using System.Diagnostics;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Avalonia.Media.Imaging;
using Grpc.Net.Client;
using MyASCS.Services.Interfaces;
using Google.Protobuf;
using Instruction;

namespace MyASCS.Services.Implementations
{
    public class RtspStreamService : IDisposable, IRtspStreamService
    {
        private readonly CancellationTokenSource _cts = new();
        private CancellationTokenSource? _framesSendingCts;
        private bool _isSendingFrames = true;

        private readonly string[] _rtspUrls =
        [
            "rtsp://admin:FFWNQY@192.168.0.118/camera/h264/ch1/main/av_stream",
            "rtsp://admin:FFWNQY@192.168.0.118/camera/h264/ch1/main/av_stream",
            "rtsp://admin:FFWNQY@192.168.0.118/camera/h264/ch1/main/av_stream",
            "rtsp://admin:FFWNQY@192.168.0.118/camera/h264/ch1/main/av_stream",
        ];

        private readonly Process?[] _ffmpegProcesses = new Process?[4];

        // Th·ª© t·ª± camera d·ª±a tr√™n t·∫ßm nh√¨n
        // Camera 1: Khu√¥n m·∫∑t t·ª´ ph·∫ßn vai tr·ªü l√™n
        // Camera 2: Ch√¢n dung (qu·∫ßn, √°o) 
        // Camera 3: Gi√†y v√† m·ªôt ph·∫ßn qu·∫ßn
        // Camera 4: B√†n tay √∫p, c·ªï tay
        private readonly string[] _positions = ["face", "portrait", "shoes", "hands"];

        // C√°c h∆∞·ªõng cho FaceID - Hi·ªÉn th·ªã ti·∫øng Vi·ªát, l∆∞u file ti·∫øng Anh
        private readonly string[] _faceDirectionsDisplay = ["tr√™n", "d∆∞·ªõi", "tr√°i", "ph·∫£i"];
        private readonly string[] _faceDirectionsFolder = ["front", "left", "right", "up"];

        // C√°c h∆∞·ªõng ch·ª•p ng∆∞·ªùi - Hi·ªÉn th·ªã ti·∫øng Vi·ªát, l∆∞u file ti·∫øng Anh
        private readonly string[] _bodyDirectionsDisplay = ["tr√°i", "sau", "ph·∫£i"];
        private readonly string[] _bodyDirectionsFolder = ["left", "back", "right"];

        private readonly string _sessionId = Guid.NewGuid().ToString();
        private readonly GrpcChannel _channel;
        private readonly GRPCService.GRPCServiceClient _grpcClient;
        private int _imageIndex = 1;
        private int _faceIdImageIndex = 1;
        private int _directionViewImageIndex = 1;

        public event Action<int, Bitmap?>? FrameCaptured;
        public event Action<string>? InstructionReceived;
        public event Action<int>? CountdownUpdated;
        public event Action<bool>? FaceIdModeChanged; // Event cho ch·∫ø ƒë·ªô FaceID
        public event Action<bool>? HandsModeChanged; // Event cho ch·∫ø ƒë·ªô Hands

        public RtspStreamService()
        {
            _channel = GrpcChannel.ForAddress("http://localhost:50051");
            _grpcClient = new GRPCService.GRPCServiceClient(_channel);

            for (var i = 0; i < 4; i++)
            {
                var cameraIndex = i;
                Task.Run(() => StartStreaming(cameraIndex));
            }

            StartFramesSending();
        }

        private void StartFramesSending()
        {
            _framesSendingCts = new CancellationTokenSource();
            _isSendingFrames = true;

            // T·∫°o task m·ªõi ƒë·ªÉ g·ª≠i frames ƒë·∫øn AI
            Task.Run(async () =>
            {
                try
                {
                    while (!_cts.Token.IsCancellationRequested && !_framesSendingCts.Token.IsCancellationRequested)
                    {
                        await SendFramesToAi("is_check");
                        await Task.Delay(10, _framesSendingCts.Token);
                    }
                }
                catch (OperationCanceledException)
                {
                    // Task ƒë√£ b·ªã h·ªßy, ƒëi·ªÅu n√†y l√† b√¨nh th∆∞·ªùng khi d·ª´ng g·ª≠i frames
                    Console.WriteLine("üõë Frames sending task canceled");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"‚ùå AI Task Crashed: {ex.Message}");
                }
            }, _framesSendingCts.Token);
        }

        private void StopFramesSending()
        {
            if (_isSendingFrames && _framesSendingCts != null)
            {
                _framesSendingCts.Cancel();
                _isSendingFrames = false;
                Console.WriteLine("üõë Stopped sending frames to AI");
            }
        }

        private void StartStreaming(int cameraIndex)
        {
            try
            {
                var sessionPath = Path.Combine(AppContext.BaseDirectory, "sessions", _sessionId);
                Directory.CreateDirectory(sessionPath);

                var outputPath = Path.Combine(sessionPath, $"{_positions[cameraIndex]}_frame.jpg");

                _ffmpegProcesses[cameraIndex] = new Process
                {
                    StartInfo = new ProcessStartInfo
                    {
                        FileName = "ffmpeg",
                        Arguments =
                            $"-rtsp_transport tcp -i {_rtspUrls[cameraIndex]} -vf scale=640:480 -r 30 -q:v 5 -update 1 -y \"{outputPath}\" -fflags nobuffer -flags low_delay -strict experimental",
                        RedirectStandardOutput = false,
                        RedirectStandardError = false,
                        UseShellExecute = true,
                        CreateNoWindow = true
                    }
                };
                _ffmpegProcesses[cameraIndex]?.Start();

                Task.Run(async () =>
                {
                    while (!_cts.Token.IsCancellationRequested)
                    {
                        await Task.Delay(100);
                        var bitmap = await CaptureFrame(outputPath);
                        if (bitmap != null)
                        {
                            FrameCaptured?.Invoke(cameraIndex, bitmap);
                        }
                    }
                }, _cts.Token);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Error starting FFmpeg for Camera {cameraIndex + 1}: {ex.Message}");
            }
        }

        // Th√™m method m·ªõi ƒë·ªÉ g·ª≠i frame v√† tr·∫£ v·ªÅ ph·∫£n h·ªìi t·ª´ AI
        private async Task<string> SendFramesToAiAndGetResponse(string typeInstruction)
        {
            try
            {
                var request = new InstructionRequest();
                for (var i = 0; i < 4; i++)
                {
                    var framePath = Path.Combine(AppContext.BaseDirectory, "sessions", _sessionId,
                        $"{_positions[i]}_frame.jpg");
                    if (File.Exists(framePath))
                    {
                        var frameData = await File.ReadAllBytesAsync(framePath);
                        switch (i)
                        {
                            case 0: request.Frame1 = ByteString.CopyFrom(frameData); break;
                            case 1: request.Frame2 = ByteString.CopyFrom(frameData); break;
                            case 2: request.Frame3 = ByteString.CopyFrom(frameData); break;
                            case 3: request.Frame4 = ByteString.CopyFrom(frameData); break;
                        }
                    }
                }

                request.TypeInstruction = typeInstruction;

                var response = await _grpcClient.GetInstructionAsync(request);
                Console.WriteLine($"üéØ AI Instruction ({typeInstruction}): {response.InstructionStr}");

                return response.InstructionStr;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå gRPC AI Detection Error: {ex.Message}");
                return string.Empty;
            }
        }

        private async Task SendFramesToAi(string typeInstruction = "is_check")
        {
            try
            {
                var request = new InstructionRequest();
                for (var i = 0; i < 4; i++)
                {
                    var framePath = Path.Combine(AppContext.BaseDirectory, "sessions", _sessionId,
                        $"{_positions[i]}_frame.jpg");
                    if (File.Exists(framePath))
                    {
                        var frameData = await File.ReadAllBytesAsync(framePath);
                        switch (i)
                        {
                            case 0: request.Frame1 = ByteString.CopyFrom(frameData); break;
                            case 1: request.Frame2 = ByteString.CopyFrom(frameData); break;
                            case 2: request.Frame3 = ByteString.CopyFrom(frameData); break;
                            case 3: request.Frame4 = ByteString.CopyFrom(frameData); break;
                        }
                    }
                }

                request.TypeInstruction = typeInstruction;

                var response = await _grpcClient.GetInstructionAsync(request);
                Console.WriteLine($"üéØ AI Instruction: {response.InstructionStr}");

                if (response.InstructionStr == "face:true")
                {
                    await HandleFaceDetected();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå gRPC AI Detection Error: {ex.Message}");
            }
        }

        private async Task HandleFaceDetected()
        {
            try
            {
                // 1. D·ª´ng g·ª≠i frame
                StopFramesSending();

                // 2. Th√¥ng b√°o ƒë·∫øn ti·∫øp vi√™n
                InstructionReceived?.Invoke("H√£y ƒë·ª©ng th·∫≥ng, gi·ªØ y√™n ƒë·∫ßu, c∆∞·ªùi l√™n!");

                // 3. ƒê·∫øm ng∆∞·ª£c 3s
                for (int i = 3; i > 0; i--)
                {
                    CountdownUpdated?.Invoke(i);
                    await Task.Delay(1000);
                }

                // Th√¥ng b√°o ƒëang ch·ª•p
                CountdownUpdated?.Invoke(0);
                await Task.Delay(500);

                // 4. Ch·ª•p v√† l∆∞u ·∫£nh
                var saveSuccess = SaveCapturedFrames();

                // Th√¥ng b√°o k·∫øt qu·∫£
                if (saveSuccess)
                {
                    InstructionReceived?.Invoke("Ch·ª•p ·∫£nh th√†nh c√¥ng ‚úÖ");
                    await Task.Delay(2000);
                }
                else
                {
                    InstructionReceived?.Invoke("L∆∞u ·∫£nh th·∫•t b·∫°i ‚ùå");
                    await Task.Delay(2000);
                }

                // 5. B·∫Øt ƒë·∫ßu qu√° tr√¨nh FaceID ngay l·∫≠p t·ª©c
                // K√≠ch ho·∫°t ch·∫ø ƒë·ªô FaceID
                FaceIdModeChanged?.Invoke(true);
                await HandleFaceIdProcess();

                // L∆∞u √Ω: Kh√¥ng c·∫ßn kh·ªüi ƒë·ªông l·∫°i vi·ªác g·ª≠i frame ·ªü ƒë√¢y
                // v√¨ HandleFaceIdProcess s·∫Ω t·ª± kh·ªüi ƒë·ªông l·∫°i khi ho√†n th√†nh
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Error in HandleFaceDetected: {ex.Message}");
                if (!_isSendingFrames)
                {
                    StartFramesSending();
                }
            }
        }

        private async Task HandleFaceIdProcess()
        {
            try
            {
                // 1. D·ª´ng g·ª≠i frame
                StopFramesSending();

                // 2. Th√¥ng b√°o ti·∫øp vi√™n kh√¥ng c∆∞·ªùi n·ªØa, gi·ªØ y√™n v·ªã tr√≠ ƒë·∫ßu
                InstructionReceived?.Invoke("Vui l√≤ng kh√¥ng c∆∞·ªùi, gi·ªØ y√™n v·ªã tr√≠ ƒë·∫ßu ƒë·ªÉ ch·ª•p ·∫£nh nh·∫≠n di·ªán");
                await Task.Delay(2000);

                // 3. ƒê·∫øm ng∆∞·ª£c tr∆∞·ªõc khi ch·ª•p ·∫£nh nh√¨n th·∫≥ng
                for (int i = 3; i > 0; i--)
                {
                    CountdownUpdated?.Invoke(i);
                    await Task.Delay(1000);
                }

                // 4. Ch·ª•p ·∫£nh nh√¨n th·∫≥ng (h∆∞·ªõng ƒë·∫ßu ti√™n)
                CountdownUpdated?.Invoke(0);
                await Task.Delay(500);

                var saveSuccess = SaveFaceIdFrame(0); // 0 = h∆∞·ªõng th·∫≥ng

                if (saveSuccess)
                {
                    InstructionReceived?.Invoke("ƒê√£ ch·ª•p ·∫£nh nh√¨n th·∫≥ng");
                    await Task.Delay(1000);
                }

                // 5. H∆∞·ªõng d·∫´n ti·∫øp vi√™n quay ƒë·∫ßu theo c√°c h∆∞·ªõng kh√°c nhau
                for (var direction = 0; direction < _faceDirectionsDisplay.Length; direction++)
                {
                    switch (direction)
                    {
                        // H∆∞·ªõng d·∫´n quay ƒë·∫ßu - Hi·ªÉn th·ªã t√™n ti·∫øng Vi·ªát
                        case 0:
                            InstructionReceived?.Invoke($"Vui l√≤ng quay ƒë·∫ßu l√™n {_faceDirectionsDisplay[direction]}");
                            break;
                        case 1:
                            InstructionReceived?.Invoke($"Vui l√≤ng quay xu·ªëng {_faceDirectionsDisplay[direction]}");
                            break;
                        default:
                            InstructionReceived?.Invoke($"Vui l√≤ng quay ƒë·∫ßu sang {_faceDirectionsDisplay[direction]}");
                            break;
                    }
                    await Task.Delay(2000); // Cho th·ªùi gian ti·∫øp vi√™n quay ƒë·∫ßu

                    // ƒê·∫øm ng∆∞·ª£c
                    CountdownUpdated?.Invoke(1);
                    await Task.Delay(1000);
                    CountdownUpdated?.Invoke(0);

                    // Ch·ª•p ·∫£nh
                    saveSuccess = SaveFaceIdFrame(direction);

                    if (saveSuccess)
                    {
                        InstructionReceived?.Invoke($"ƒê√£ ch·ª•p ·∫£nh nh√¨n {_faceDirectionsDisplay[direction]}");
                        await Task.Delay(1000);
                    }
                }

                // 6. Th√¥ng b√°o ƒë√£ ch·ª•p xong
                InstructionReceived?.Invoke("ƒê√£ ch·ª•p xong t·∫•t c·∫£ c√°c g√≥c nh√¨n FaceID ‚úÖ");
                await Task.Delay(2000);

                // 7. V√¥ hi·ªáu h√≥a ch·∫ø ƒë·ªô FaceID
                FaceIdModeChanged?.Invoke(false);

                // 8. B·∫Øt ƒë·∫ßu quy tr√¨nh ch·ª•p ·∫£nh to√†n th√¢n 4 h∆∞·ªõng
                await CaptureAllBodyDirections();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Error in HandleFaceIdProcess: {ex.Message}");
                FaceIdModeChanged?.Invoke(false); // ƒê·∫£m b·∫£o t·∫Øt ch·∫ø ƒë·ªô FaceID trong tr∆∞·ªùng h·ª£p c√≥ l·ªói

                if (!_isSendingFrames)
                {
                    StartFramesSending();
                }
            }
        }

        private async Task CaptureAllBodyDirections()
        {
            try
            {
                // Th√¥ng b√°o b·∫Øt ƒë·∫ßu ch·ª•p ·∫£nh c√°c h∆∞·ªõng
                InstructionReceived?.Invoke("B·∫Øt ƒë·∫ßu ch·ª•p ·∫£nh to√†n th√¢n c√°c g√≥c ƒë·ªô");
                await Task.Delay(2000);

                // Ch·ª•p ·∫£nh h∆∞·ªõng tr√°i (ti·∫øp vi√™n quay ng∆∞·ªùi sang ph·∫£i 90 ƒë·ªô)
                await CaptureBodyDirection(0); // 0 = h∆∞·ªõng tr√°i

                // Ch·ª•p ·∫£nh h∆∞·ªõng sau (ti·∫øp vi√™n quay ng∆∞·ªùi th√™m 90 ƒë·ªô, l∆∞ng v·ªÅ ph√≠a camera)
                await CaptureBodyDirection(1); // 1 = h∆∞·ªõng sau

                // Ch·ª•p ·∫£nh h∆∞·ªõng ph·∫£i (ti·∫øp vi√™n quay ng∆∞·ªùi th√™m 90 ƒë·ªô)
                await CaptureBodyDirection(2); // 2 = h∆∞·ªõng ph·∫£i

                // Th√¥ng b√°o ho√†n th√†nh qu√° tr√¨nh ch·ª•p ·∫£nh
                InstructionReceived?.Invoke("ƒê√£ ch·ª•p xong t·∫•t c·∫£ c√°c h∆∞·ªõng! C·∫£m ∆°n b·∫°n ƒë√£ h·ª£p t√°c ‚úÖ");
                await Task.Delay(3000);

                // Th√™m m·ªõi: Th·ª±c hi·ªán ch·ª•p ·∫£nh tay
                await CaptureHandsImages();

                // Kh·ªüi ƒë·ªông l·∫°i vi·ªác g·ª≠i frame v·ªõi type_instruction = "clothes"
                _framesSendingCts = new CancellationTokenSource();
                _isSendingFrames = true;

                await Task.Run(async () =>
                {
                    try
                    {
                        while (!_cts.Token.IsCancellationRequested && !_framesSendingCts.Token.IsCancellationRequested)
                        {
                            await SendFramesToAi("clothes");
                            await Task.Delay(10, _framesSendingCts.Token);
                        }
                    }
                    catch (OperationCanceledException)
                    {
                        Console.WriteLine("üõë Frames sending task canceled");
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"‚ùå AI Task Crashed: {ex.Message}");
                    }
                }, _framesSendingCts.Token);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Error in CaptureAllBodyDirections: {ex.Message}");

                if (!_isSendingFrames)
                {
                    StartFramesSending();
                }
            }
        }

        // Th√™m method m·ªõi ƒë·ªÉ th·ª±c hi·ªán ch·ª•p ·∫£nh tay
        private async Task CaptureHandsImages()
        {
            try
            {
                // K√≠ch ho·∫°t ch·∫ø ƒë·ªô Hands ƒë·ªÉ ph√≥ng to camera 4
                HandsModeChanged?.Invoke(true);
                
                // 1. Th√¥ng b√°o ti·∫øp vi√™n ƒë·∫∑t tay l√™n gi√°
                InstructionReceived?.Invoke("Vui l√≤ng quay ph·∫£i v√† ƒë·∫∑t tay l√™n gi√° ƒëo");

                // T·∫°o bi·∫øn theo d√µi tr·∫°ng th√°i ƒë·∫∑t tay
                bool handPositionCorrect = false;

                // Ki·ªÉm tra v·ªã tr√≠ tay cho ƒë·∫øn khi ƒë√∫ng
                while (!handPositionCorrect)
                {
                    // G·ª≠i frame l√™n service v·ªõi type_instruction="hand"
                    var response = await SendFramesToAiAndGetResponse("hand");

                    // Ki·ªÉm tra ph·∫£n h·ªìi t·ª´ AI
                    if (response == "hand:true")
                    {
                        // ƒê√£ ƒë·∫∑t tay ƒë√∫ng
                        InstructionReceived?.Invoke("Tay ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t ƒë√∫ng v·ªã tr√≠ ‚úÖ");
                        handPositionCorrect = true;
                        await Task.Delay(1000);
                    }
                    else
                    {
                        // Ch∆∞a ƒë·∫∑t tay ƒë√∫ng
                        InstructionReceived?.Invoke("B·∫°n ch∆∞a ƒë·∫∑t tay ch√≠nh x√°c. Vui l√≤ng ƒë·∫∑t tay l√™n gi√°");
                        await Task.Delay(2000); // Ch·ªù 2 gi√¢y tr∆∞·ªõc khi ki·ªÉm tra l·∫°i
                    }
                }

                // 2. Th√¥ng b√°o chu·∫©n b·ªã ch·ª•p
                InstructionReceived?.Invoke("Chu·∫©n b·ªã ch·ª•p ·∫£nh tay, vui l√≤ng gi·ªØ y√™n tay");

                // 3. ƒê·∫øm ng∆∞·ª£c 3s
                for (int i = 3; i > 0; i--)
                {
                    CountdownUpdated?.Invoke(i);
                    await Task.Delay(1000);
                }

                // 4. Th√¥ng b√°o ƒëang ch·ª•p
                CountdownUpdated?.Invoke(0);
                await Task.Delay(500);

                // 5. Ch·ª•p v√† l∆∞u ·∫£nh (ch·ªß y·∫øu l·∫•y ·∫£nh t·ª´ camera 3 - hands)
                var saveSuccess = SaveHandsImages();

                // 6. Th√¥ng b√°o k·∫øt qu·∫£
                if (saveSuccess)
                {
                    InstructionReceived?.Invoke("ƒê√£ ch·ª•p xong ·∫£nh tay ‚úÖ");
                    await Task.Delay(2000);

                    // 7. Th√¥ng b√°o ho√†n th√†nh to√†n b·ªô quy tr√¨nh
                    InstructionReceived?.Invoke("ƒê√£ ho√†n th√†nh to√†n b·ªô quy tr√¨nh, y√™u c·∫ßu ti·∫øp vi√™n ra ngo√†i!");
                    await Task.Delay(3000);
                }
                else
                {
                    InstructionReceived?.Invoke("L∆∞u ·∫£nh tay th·∫•t b·∫°i ‚ùå");
                    await Task.Delay(2000);
                }
                
                // V√¥ hi·ªáu h√≥a ch·∫ø ƒë·ªô Hands khi ho√†n th√†nh
                HandsModeChanged?.Invoke(false);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Error in CaptureHandsImages: {ex.Message}");
                // ƒê·∫£m b·∫£o t·∫Øt ch·∫ø ƒë·ªô Hands trong tr∆∞·ªùng h·ª£p c√≥ l·ªói
                HandsModeChanged?.Invoke(false);
            }
        }

        private async Task CaptureBodyDirection(int directionIndex)
        {
            string turnInstruction;
            if (directionIndex == 0)
            {
                // H∆∞·ªõng d·∫´n quay sang tr√°i
                turnInstruction = "Vui l√≤ng quay ng∆∞·ªùi sang ph·∫£i 90 ƒë·ªô so v·ªõi v·ªã tr√≠ hi·ªán t·∫°i";
            }
            else if (directionIndex == 1)
            {
                // H∆∞·ªõng d·∫´n quay l∆∞ng v·ªÅ ph√≠a camera
                turnInstruction = "Vui l√≤ng quay th√™m 90 ƒë·ªô ƒë·ªÉ l∆∞ng h∆∞·ªõng v·ªÅ ph√≠a camera";
            }
            else
            {
                // H∆∞·ªõng d·∫´n quay sang ph·∫£i (ho√†n t·∫•t v√≤ng quay)
                turnInstruction = "Vui l√≤ng quay th√™m 90 ƒë·ªô n·ªØa ƒë·ªÉ ho√†n t·∫•t v√≤ng quay";
            }

            // Th√¥ng b√°o h∆∞·ªõng d·∫´n
            InstructionReceived?.Invoke(turnInstruction);

            // Ch·ªù 3 gi√¢y ƒë·ªÉ ti·∫øp vi√™n di chuy·ªÉn
            await Task.Delay(3000);

            // Th√¥ng b√°o chu·∫©n b·ªã ch·ª•p ·∫£nh h∆∞·ªõng hi·ªán t·∫°i - Hi·ªÉn th·ªã t√™n ti·∫øng Vi·ªát
            InstructionReceived?.Invoke(
                $"Chu·∫©n b·ªã ch·ª•p ·∫£nh h∆∞·ªõng {_bodyDirectionsDisplay[directionIndex]}, vui l√≤ng ƒë·ª©ng y√™n");

            // ƒê·∫øm ng∆∞·ª£c 1s
            CountdownUpdated?.Invoke(1);
            await Task.Delay(1000);

            // Th√¥ng b√°o ƒëang ch·ª•p
            CountdownUpdated?.Invoke(0);
            await Task.Delay(500);

            // Ch·ª•p v√† l∆∞u ·∫£nh
            var saveSuccess = SaveDirectionViewFrames(directionIndex);

            // Th√¥ng b√°o k·∫øt qu·∫£ - Hi·ªÉn th·ªã t√™n ti·∫øng Vi·ªát
            if (saveSuccess)
            {
                InstructionReceived?.Invoke($"ƒê√£ ch·ª•p xong ·∫£nh h∆∞·ªõng {_bodyDirectionsDisplay[directionIndex]} ‚úÖ");
                await Task.Delay(2000);
            }
            else
            {
                InstructionReceived?.Invoke($"L∆∞u ·∫£nh h∆∞·ªõng {_bodyDirectionsDisplay[directionIndex]} th·∫•t b·∫°i ‚ùå");
                await Task.Delay(2000);
            }
        }

        private static async Task<Bitmap?> CaptureFrame(string filePath)
        {
            if (!File.Exists(filePath)) return null;

            try
            {
                await using var stream = File.OpenRead(filePath);
                return new Bitmap(stream);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Error loading frame: {ex.Message}");
                return null;
            }
        }

        private bool SaveCapturedFrames()
        {
            try
            {
                var timestamp = DateTime.Now.ToString("yyyyMMdd_HHmmss");
                // T·∫°o th∆∞ m·ª•c upload n·∫øu ch∆∞a t·ªìn t·∫°i
                var uploadPath = Path.Combine(AppContext.BaseDirectory, "upload", _sessionId);
                Directory.CreateDirectory(uploadPath);

                for (var i = 0; i < 4; i++)
                {
                    var framePath = Path.Combine(AppContext.BaseDirectory, "sessions", _sessionId,
                        $"{_positions[i]}_frame.jpg");
                    // T·∫°o t√™n file m·ªõi theo ƒë·ªãnh d·∫°ng: <position><imageIndex>_<timestamp>.png
                    var capturePath = Path.Combine(uploadPath, $"{_positions[i]}{_imageIndex}_{timestamp}.png");
                    SaveImage(framePath, capturePath);
                }

                _imageIndex++;
                Console.WriteLine($"‚úÖ ƒê√£ l∆∞u b·ªô ·∫£nh th·ª© {_imageIndex - 1}");
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Error saving captured frames: {ex.Message}");
                return false;
            }
        }

        private bool SaveFaceIdFrame(int directionIndex)
        {
            try
            {
                var timestamp = DateTime.Now.ToString("yyyyMMdd_HHmmss");
                // T·∫°o th∆∞ m·ª•c upload n·∫øu ch∆∞a t·ªìn t·∫°i
                var uploadPath = Path.Combine(AppContext.BaseDirectory, "upload", _sessionId);
                Directory.CreateDirectory(uploadPath);

                // Ch·ªâ l∆∞u ·∫£nh t·ª´ camera khu√¥n m·∫∑t (camera 0)
                var framePath = Path.Combine(AppContext.BaseDirectory, "sessions", _sessionId,
                    $"{_positions[0]}_frame.jpg");

                // T·∫°o t√™n file theo ƒë·ªãnh d·∫°ng m·ªõi: face<imageIndex>_<timestamp>.png
                var capturePath = Path.Combine(uploadPath, $"face{_faceIdImageIndex}_{timestamp}.png");

                SaveImage(framePath, capturePath);

                _faceIdImageIndex++;
                Console.WriteLine($"üì∑ ƒê√£ l∆∞u ·∫£nh FaceID h∆∞·ªõng {_faceDirectionsDisplay[directionIndex]}");
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Error saving FaceID frame: {ex.Message}");
                return false;
            }
        }

        private bool SaveDirectionViewFrames(int directionIndex)
        {
            try
            {
                var timestamp = DateTime.Now.ToString("yyyyMMdd_HHmmss");

                // T·∫°o th∆∞ m·ª•c upload n·∫øu ch∆∞a t·ªìn t·∫°i
                var uploadPath = Path.Combine(AppContext.BaseDirectory, "upload", _sessionId);
                Directory.CreateDirectory(uploadPath);

                // L∆∞u 3 ·∫£nh (ƒë·∫ßu, ch√¢n dung, gi√†y) t·ª´ camera 0, 1, v√† 2
                // Camera 0 = face (ƒë·∫ßu), Camera 1 = portrait (ch√¢n dung), Camera 2 = shoes (gi√†y)
                var cameraIndices = new int[] { 0, 1, 2 };

                for (var i = 0; i < cameraIndices.Length; i++)
                {
                    var cameraIndex = cameraIndices[i];
                    var framePath = Path.Combine(AppContext.BaseDirectory, "sessions", _sessionId,
                        $"{_positions[cameraIndex]}_frame.jpg");
                    // T·∫°o t√™n file theo ƒë·ªãnh d·∫°ng m·ªõi: <position><imageIndex>_<timestamp>.png
                    var capturePath = Path.Combine(uploadPath,
                        $"{_positions[cameraIndex]}{_directionViewImageIndex}_{timestamp}.png");
                    SaveImage(framePath, capturePath);
                }

                _directionViewImageIndex++;
                Console.WriteLine(
                    $"üì∑ ƒê√£ l∆∞u b·ªô ·∫£nh h∆∞·ªõng {_bodyDirectionsDisplay[directionIndex]} (th∆∞ m·ª•c: upload/{_sessionId})");
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Error saving direction view frames: {ex.Message}");
                return false;
            }
        }

        private bool SaveHandsImages()
        {
            try
            {
                var timestamp = DateTime.Now.ToString("yyyyMMdd_HHmmss");

                // T·∫°o th∆∞ m·ª•c upload n·∫øu ch∆∞a t·ªìn t·∫°i
                var uploadPath = Path.Combine(AppContext.BaseDirectory, "upload", _sessionId);
                Directory.CreateDirectory(uploadPath);

                // L∆∞u ·∫£nh t·ª´ camera 3 (hands)
                var framePath = Path.Combine(AppContext.BaseDirectory, "sessions", _sessionId,
                    $"{_positions[3]}_frame.jpg");

                // T·∫°o t√™n file theo ƒë·ªãnh d·∫°ng: hands<imageIndex>_<timestamp>.png
                var capturePath = Path.Combine(uploadPath, $"hands{_imageIndex}_{timestamp}.png");
                SaveImage(framePath, capturePath);

                _imageIndex++;
                Console.WriteLine($"üì∑ ƒê√£ l∆∞u ·∫£nh tay (th∆∞ m·ª•c: upload/{_sessionId})");
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Error saving hands images: {ex.Message}");
                return false;
            }
        }

        private static void SaveImage(string sourcePath, string destinationPath)
        {
            if (!File.Exists(sourcePath)) return;
            File.Copy(sourcePath, destinationPath, true);
            Console.WriteLine($"üì∏ Saved frame to {destinationPath}");
        }

        private void StopProcessing()
        {
            _framesSendingCts?.Cancel();
            _cts.Cancel();
        }

        public void Dispose()
        {
            StopProcessing();
            for (var i = 0; i < 4; i++)
            {
                if (_ffmpegProcesses[i] != null && !_ffmpegProcesses[i]!.HasExited)
                {
                    _ffmpegProcesses[i]!.Kill();
                    _ffmpegProcesses[i]!.WaitForExit();
                }

                _ffmpegProcesses[i]?.Dispose();
            }

            _channel.Dispose();
        }
    }
}